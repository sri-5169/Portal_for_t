import Admin from "../model/admin_schema.js";
import bcrypt from "bcrypt"
import OTP from "../model/otp_schema.js";
import Token from "../model/token.js"
import jwt from "jsonwebtoken";
import dotenv from "dotenv";
import AdminName from "../model/admin_name_schema.js";
dotenv.config();
export const CreateAdmin = async (request, response) => {
  console.log(request.body);
  try {
    const exist = await Admin.findOne({ Email: request.body.Email });
    if (exist) {
      return response.status(401).json("User Already exists");
    }
    const admin = request.body;
    if (admin.Password === admin.ConfirmPassword) {
      const hashedpassword = await bcrypt.hash(admin.Password,10);
      const newadmin = new Admin({
        Name: admin.Name,
        DateofBirth: admin.DateofBirth,
        AadhaarNo: admin.AadhaarNo,
        Email: admin.Email,
        Password: hashedpassword,
      });
      await newadmin.save();
      const name = new AdminName({
        Name : admin.Name,
      })
      name.save();
      console.log("saved the admin ", newadmin);
      response.status(200).json("Successfully Registered");
    } else {
      console.log("Wrong Credentials");
      response.status(401).json("Wrong Credentials");
    } 
  } catch (error) {
    console.log("Error :  ", error.message);
  }
};
export const LoginAdmin = async (request, response) => {
  try {
    console.log(request.body);
    const { Email, Password } = request.body;
    const admin = await Admin.findOne({ Email: Email });
    if (admin) {
      try {
        console.log("This admin is trying to login", admin);
        const  match = await bcrypt.compare(Password,admin.Password);
        if (match) {
          console.log("entered");
          const accessToken = jwt.sign(admin.toJSON(),process.env.ACCESS_SECRET_KEY,{ expiresIn: "1m" });
          const refreshToken = jwt.sign(admin.toJSON(),process.env.REFRESH_SECRET_KEY);
          console.log(refreshToken);
          const newToken = new Token({ token: refreshToken });
          await newToken.save();
          return response.status(200).json({ message : `Hi ${admin.Name}`,accessToken: accessToken,refreshToken: refreshToken,name : admin.Name,Email : admin.Email,});
        } else {
          response.status(401).json({msg : "Invalid login credentials"});
        }
      } catch (error) {
        response.status(401).send({msg :"Invalid login credentials"});
      }
    } else {
      response.status(400).json({msg :"User not registered"});
    }
  } catch (err) {
    response.status(500).json({ msg: "error while login the user" });
  }
};

export const ForgotPassword = async (request,response) => {
  try{
  const random = Math.floor(1000000*Math.random());
  const otp = new  OTP({
    email : request.body.email,
    otp : random,
  })
  await otp.save();
  console.log(request.body);
  let details = {
    from: "srinath.p.india2000@gmail.com",
    to: "bittusrinath2000@gmail.com",
    subject: "OTP regarding the password forget",
    text:
      ` Dear Sir/Madam,
      Please use the following OTP ${random} to complete your new password change.
      For Enquiries, Contact : 6387744816
      This email is automatically generated by the portal for teachers website. Please do not reply to this email.`,
  };
  mailTransporter.sendMail(details, (error) => {
    if (error) {
      console.log("it has an error", error);
    } else {
      console.log("I have sent the msg");
    }
    return response.status(200).json({msg : "Successfull sent the otp Now type it"});
  });
}
  catch(error){
     return  response.status(500).json({msg : "Couldn't send the otp, Kindly resend it "});
  }
};

export const saveAdmins = async () => {
  
    try{
        const admins = await Admin.find({});
        console.log('amins',admins);
        for(let i=0;i<admins.length;i++){
          console.log(admins[i].Name);
          if(admins[i].Name){
              const a = new AdminName({
                Name : admins[i].Name,
              })
               a.save();
          }
        }
      }
    catch(error){
      console.log("Hey Error");
    }
}